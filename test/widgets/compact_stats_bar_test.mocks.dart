// Mocks generated by Mockito 5.4.6 from annotations
// in zenu/test/widgets/compact_stats_bar_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i4;

import 'package:flutter/material.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:zenu/models/reminder.dart' as _i6;
import 'package:zenu/models/statistics.dart' as _i2;
import 'package:zenu/services/in_app_notification_service.dart' as _i7;
import 'package:zenu/services/reminder_service.dart' as _i5;
import 'package:zenu/services/theme_service.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStatistics_0 extends _i1.SmartFake implements _i2.Statistics {
  _FakeStatistics_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeThemeData_1 extends _i1.SmartFake implements _i3.ThemeData {
  _FakeThemeData_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeColor_2 extends _i1.SmartFake implements _i4.Color {
  _FakeColor_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ReminderService].
///
/// See the documentation for Mockito's code generation for more information.
class MockReminderService extends _i1.Mock implements _i5.ReminderService {
  MockReminderService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i6.Reminder> get reminders =>
      (super.noSuchMethod(
            Invocation.getter(#reminders),
            returnValue: <_i6.Reminder>[],
          )
          as List<_i6.Reminder>);

  @override
  _i2.Statistics get statistics =>
      (super.noSuchMethod(
            Invocation.getter(#statistics),
            returnValue: _FakeStatistics_0(
              this,
              Invocation.getter(#statistics),
            ),
          )
          as _i2.Statistics);

  @override
  bool get isRunning =>
      (super.noSuchMethod(Invocation.getter(#isRunning), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void setInAppNotificationService(_i7.InAppNotificationService? service) =>
      super.noSuchMethod(
        Invocation.method(#setInAppNotificationService, [service]),
        returnValueForMissingStub: null,
      );

  @override
  void triggerTestReminder(_i6.Reminder? reminder) => super.noSuchMethod(
    Invocation.method(#triggerTestReminder, [reminder]),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<void> loadData() =>
      (super.noSuchMethod(
            Invocation.method(#loadData, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> saveData() =>
      (super.noSuchMethod(
            Invocation.method(#saveData, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void startReminders() => super.noSuchMethod(
    Invocation.method(#startReminders, []),
    returnValueForMissingStub: null,
  );

  @override
  void stopReminders() => super.noSuchMethod(
    Invocation.method(#stopReminders, []),
    returnValueForMissingStub: null,
  );

  @override
  void completeReminder(_i6.Reminder? reminder, {int? customCount}) =>
      super.noSuchMethod(
        Invocation.method(
          #completeReminder,
          [reminder],
          {#customCount: customCount},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void snoozeReminder(_i6.Reminder? reminder, Duration? snoozeDuration) =>
      super.noSuchMethod(
        Invocation.method(#snoozeReminder, [reminder, snoozeDuration]),
        returnValueForMissingStub: null,
      );

  @override
  void toggleReminder(String? reminderId) => super.noSuchMethod(
    Invocation.method(#toggleReminder, [reminderId]),
    returnValueForMissingStub: null,
  );

  @override
  void updateReminderInterval(String? reminderId, Duration? newInterval) =>
      super.noSuchMethod(
        Invocation.method(#updateReminderInterval, [reminderId, newInterval]),
        returnValueForMissingStub: null,
      );

  @override
  void updateExerciseCount(String? reminderId, int? newCount) =>
      super.noSuchMethod(
        Invocation.method(#updateExerciseCount, [reminderId, newCount]),
        returnValueForMissingStub: null,
      );

  @override
  void addReminder(_i6.Reminder? reminder) => super.noSuchMethod(
    Invocation.method(#addReminder, [reminder]),
    returnValueForMissingStub: null,
  );

  @override
  void removeReminder(String? reminderId) => super.noSuchMethod(
    Invocation.method(#removeReminder, [reminderId]),
    returnValueForMissingStub: null,
  );

  @override
  void updateReminder(_i6.Reminder? updatedReminder) => super.noSuchMethod(
    Invocation.method(#updateReminder, [updatedReminder]),
    returnValueForMissingStub: null,
  );

  @override
  void duplicateReminder(String? reminderId) => super.noSuchMethod(
    Invocation.method(#duplicateReminder, [reminderId]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ThemeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeService extends _i1.Mock implements _i9.ThemeService {
  MockThemeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isDarkMode =>
      (super.noSuchMethod(Invocation.getter(#isDarkMode), returnValue: false)
          as bool);

  @override
  _i3.ThemeData get lightTheme =>
      (super.noSuchMethod(
            Invocation.getter(#lightTheme),
            returnValue: _FakeThemeData_1(this, Invocation.getter(#lightTheme)),
          )
          as _i3.ThemeData);

  @override
  _i3.ThemeData get darkTheme =>
      (super.noSuchMethod(
            Invocation.getter(#darkTheme),
            returnValue: _FakeThemeData_1(this, Invocation.getter(#darkTheme)),
          )
          as _i3.ThemeData);

  @override
  _i4.Color get backgroundColor =>
      (super.noSuchMethod(
            Invocation.getter(#backgroundColor),
            returnValue: _FakeColor_2(
              this,
              Invocation.getter(#backgroundColor),
            ),
          )
          as _i4.Color);

  @override
  _i4.Color get cardColor =>
      (super.noSuchMethod(
            Invocation.getter(#cardColor),
            returnValue: _FakeColor_2(this, Invocation.getter(#cardColor)),
          )
          as _i4.Color);

  @override
  _i4.Color get textPrimary =>
      (super.noSuchMethod(
            Invocation.getter(#textPrimary),
            returnValue: _FakeColor_2(this, Invocation.getter(#textPrimary)),
          )
          as _i4.Color);

  @override
  _i4.Color get textSecondary =>
      (super.noSuchMethod(
            Invocation.getter(#textSecondary),
            returnValue: _FakeColor_2(this, Invocation.getter(#textSecondary)),
          )
          as _i4.Color);

  @override
  _i4.Color get borderColor =>
      (super.noSuchMethod(
            Invocation.getter(#borderColor),
            returnValue: _FakeColor_2(this, Invocation.getter(#borderColor)),
          )
          as _i4.Color);

  @override
  _i4.Color get shadowColor =>
      (super.noSuchMethod(
            Invocation.getter(#shadowColor),
            returnValue: _FakeColor_2(this, Invocation.getter(#shadowColor)),
          )
          as _i4.Color);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i8.Future<void> toggleTheme() =>
      (super.noSuchMethod(
            Invocation.method(#toggleTheme, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
